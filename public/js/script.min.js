/* Add class raw javascript */

function hasClass(ele,cls) {
    return !!ele.className.match(new RegExp('(\\s|^)'+cls+'(\\s|$)'));
}

function removeClass(element, className) {
    if (element && hasClass(element,className)) {
        var reg = new RegExp('(\\s|^)'+className+'(\\s|$)');
        element.className = ' ' + element.className.replace(reg,'') + ' ';
    }
}

function addClass(element, className) {
    if (element && !hasClass(element,className)) {
        element.className += '  '+ className + '  ';
    }
}

// Higher-order functions for Nodelists and full browser support
// https://toddmotto.com/ditch-the-array-foreach-call-nodelist-hack/#recommendations
// These functions are taken from the allmighty http://eloquentjavascript.net/05_higher_order.html
// Also they have been adapted to support the index value
function forEachNl(array, action) {
  for (var i = 0; i < array.length; i++)
    action(array[i], i);
}

function filterNl(array, test) {
  var passed = [];
  for (var i = 0; i < array.length; i++) {
    if (test(array[i], i))
      passed.push(array[i]);
  }
  return passed;
}

function mapNl(array, transform) {
  var mapped = [];
  for (var i = 0; i < array.length; i++)
    mapped.push(transform(array[i], i));
  return mapped;
}

function reduceNl(array, combine, start) {
  var current = start;
  for (var i = 0; i < array.length; i++)
    current = combine(current, array[i], i);
  return current;
}

function everyNl(array, predicate) {
  for (var i = 0; i < array.length; i++) {
    if (!predicate(array[i], i))
      return false;
  }
  return true;
}

function someNl(array, predicate) {
  for (var i = 0; i < array.length; i++) {
    if (predicate(array[i], i))
      return true;
  }
  return false;
}


function ajaxify(linkEl, callback) {
	document.querySelectorAll(linkEl).forEach(function(el) {
		var url = el.attributes.href.value;
		el.addEventListener('click', function(event) {
			event.preventDefault();

			var xmlhttp = new XMLHttpRequest();

			xmlhttp.onreadystatechange = function() {
				if (xmlhttp.readyState == XMLHttpRequest.DONE ) {
					if (xmlhttp.status == 200) {
						callback(xmlhttp.responseText);
					} else if (xmlhttp.status == 400) {
						console.log('There was an error 400');
					} else {
						console.log('something else other than 200 was returned');
						console.log(xmlhttp.responseText);
					}
				}
			};

			xmlhttp.open("GET", url, true);
			xmlhttp.send();
		}, false);
	});
}

function injectPartial(partialEl, containerEl, response) {
	var container = document.querySelector(containerEl);
	container.innerHTML = "";
	var doc = new DOMParser().parseFromString(response, 'text/html');
	var content = doc.documentElement.querySelector(partialEl);
	container.appendChild(content);
}

ajaxify('.event a', function(response){
	injectPartial('section.event', '.popup-content', response);
	addClass(document.querySelector('body'), 'popup-active');
});

ajaxify('a.post', function(response){
	injectPartial('article.post', '.popup-content', response);
	addClass(document.querySelector('body'), 'popup-active');
});

forEachNl(document.querySelectorAll('.close-popup, .popup-overlay'), function(el) {
	el.addEventListener('click', function(event) {
		removeClass(document.querySelector('body'), 'popup-active');
	}, false);
});

addClass(document.querySelector('.agenda'), 'interactive');

agendaIndex = 0;
months = document.querySelectorAll('.month');

document.querySelector('.controls .left').addEventListener('click', function(event) {
	if(agendaIndex > 0) {
		agendaIndex --;
		updateAgenda();
		updateTimeSelector();
	}
});

document.querySelector('.controls .right').addEventListener('click', function(event) {
	if(agendaIndex < months.length - 1) {
		agendaIndex ++;
		updateAgenda();
		updateTimeSelector();
	}
});

forEachNl(document.querySelectorAll('.time-selector label'), function(el, index) {
	el.addEventListener('click', function(event) {
		agendaIndex = index;
		updateAgenda();
	});
});

forEachNl(document.querySelectorAll('.filter label'), function(el, index) {
	el.addEventListener('click', function(event) {
		var checked = document.querySelectorAll('.filter input')[index].checked;
		filterAgenda(el.getAttribute('for'), checked);
		toggleEmptyMonthMessage();
	});
});

function updateAgenda() {
	forEachNl(months, function(el, index) {
		removeClass(el, 'toLeft');
		removeClass(el, 'toRight');
		removeClass(el, 'currentMonth');

		if(index < agendaIndex) {
			addClass(el, 'toLeft');
		} else if (index > agendaIndex) {
			addClass(el, 'toRight');
		}
	});

	addClass(months[agendaIndex], 'currentMonth');
}

function updateTimeSelector() {
	forEachNl(document.querySelectorAll('.time-selector input'), function(el, index){
		if(index === agendaIndex) {
			el.checked = true;
		}
	});
}

function filterAgenda(filter, toFilter) {
	var events = document.querySelectorAll('.event');

	var matchedEvents = filterNl(events, function(event){
		return hasClass(event, filter);
	});

	forEachNl(matchedEvents, function(event){
		if (toFilter) addClass(event, 'filtered');
		else removeClass(event, 'filtered');
	});
}

function toggleEmptyMonthMessage() {
	forEachNl(months, function(month){
		var eventsInMonth = month.querySelectorAll('.event');
		var alert = month.querySelector('.no-events-in-filter');

		var hasEvents = someNl(eventsInMonth, function(event){
			return !hasClass(event, 'filtered');
		});

		if (!hasEvents && eventsInMonth.length) {
			alert.innerText = 'Aucun évènement ne correspond à votre recherche ce mois-ci.';
			addClass(alert, 'show');
		} else if (hasEvents && eventsInMonth.length) {
			removeClass(alert, 'show');
		}

		console.log(month);
	});
}
//# sourceMappingURL=data:application/json;charset=utf8;base64,
