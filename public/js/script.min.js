/* Add class raw javascript */

function hasClass(ele,cls) {
    return !!ele.className.match(new RegExp('(\\s|^)'+cls+'(\\s|$)'));
}

function removeClass(element, className) {
    if (element && hasClass(element,className)) {
        var reg = new RegExp('(\\s|^)'+className+'(\\s|$)');
        element.className = ' ' + element.className.replace(reg,'') + ' ';
    }
}

function addClass(element, className) {
    if (element && !hasClass(element,className)) {
        element.className += '  '+ className + '  ';
    }
}

// Higher-order functions for Nodelists and full browser support
// https://toddmotto.com/ditch-the-array-foreach-call-nodelist-hack/#recommendations
// These functions are taken from the allmighty http://eloquentjavascript.net/05_higher_order.html
// Also they have been adapted to support the index value
function forEachNl(array, action) {
  for (var i = 0; i < array.length; i++)
    action(array[i], i);
}

function filterNl(array, test) {
  var passed = [];
  for (var i = 0; i < array.length; i++) {
    if (test(array[i], i))
      passed.push(array[i]);
  }
  return passed;
}

function mapNl(array, transform) {
  var mapped = [];
  for (var i = 0; i < array.length; i++)
    mapped.push(transform(array[i], i));
  return mapped;
}

function reduceNl(array, combine, start) {
  var current = start;
  for (var i = 0; i < array.length; i++)
    current = combine(current, array[i], i);
  return current;
}

function everyNl(array, predicate) {
  for (var i = 0; i < array.length; i++) {
    if (!predicate(array[i], i))
      return false;
  }
  return true;
}

function someNl(array, predicate) {
  for (var i = 0; i < array.length; i++) {
    if (predicate(array[i], i))
      return true;
  }
  return false;
}


function ajaxify(linkEl, callback) {
	document.querySelectorAll(linkEl).forEach(function(el) {
		var url = el.attributes.href.value;
		el.addEventListener('click', function(event) {
			event.preventDefault();

			var xmlhttp = new XMLHttpRequest();

			xmlhttp.onreadystatechange = function() {
				if (xmlhttp.readyState == XMLHttpRequest.DONE ) {
					if (xmlhttp.status == 200) {
						callback(xmlhttp.responseText);
					} else if (xmlhttp.status == 400) {
						console.log('There was an error 400');
					} else {
						console.log('something else other than 200 was returned');
						console.log(xmlhttp.responseText);
					}
				}
			};

			xmlhttp.open("GET", url, true);
			xmlhttp.send();
		}, false);
	});
}

function injectPartial(partialEl, containerEl, response) {
	var container = document.querySelector(containerEl);
	container.innerHTML = "";
	currentPopup = new DOMParser().parseFromString(response, 'text/html');
	var content = currentPopup.documentElement.querySelector(partialEl);
	container.appendChild(content);
}

ajaxify('.event a', function(response){
	injectPartial('article.event', '.popup-content', response);
	addClass(document.querySelector('body'), 'popup-active');
});

ajaxify('a.post', function(response){
	injectPartial('article.post', '.popup-content', response);
	addClass(document.querySelector('body'), 'popup-active');
});

forEachNl(document.querySelectorAll('.close-popup, .popup-overlay'), function(el) {
	el.addEventListener('click', function(event) {
		removeClass(document.querySelector('body'), 'popup-active');
	}, false);
});
var contactForm = document.querySelector('section.contact form');

var resultMessages = {
	success: 'Votre message a été envoyé, merci.',
	invalidEmail: 'Erreur&nbsp;: Veuillez entrer une adresse email valide.',
	invalidPhone: 'Erreur&nbsp;: Veuillez entrer un numéro de téléphone valide.',
	missingFields: 'Erreur&nbsp;: Des champs requis n\'ont pas été remplis.',
	invalidCharacters: 'Erreur&nbsp;: L’email contient des caractères invalides.',
	failure: 'Erreur&nbsp;: Votre message n’a pas pu être envoyé, veuillez réessayer plus tard.'
};

function submitEnquiry(form) {
	event.preventDefault();
	addClass(contactForm, 'loading');
	ajaxPostMail(form, function(responses){
		setTimeout(function() {
			notifyContactForm(responses); // response is an array of message
			removeClass(contactForm, 'loading');
		}, 1000);
	});
}

// This function sends the request to the server
function ajaxPostMail(form, callback) {
	var url = form.querySelector('#action').value,
		xhr = new XMLHttpRequest(),
		params = [],
		response;

	// Building up the request...
	for (var i = 0, name, value; i < form.elements.length; i++) {
		name = encodeURIComponent(form.elements[i].name);
		value = encodeURIComponent(form.elements[i].value);
		params.push(name + '=' + value);
	}
	params.push(encodeURIComponent('ajax') + "=" + encodeURIComponent(true)); // This is sent with ajax
	params = params.join('&');

	// Recording the response
	xhr.onreadystatechange = function() {
		if (xhr.readyState === 4) {
			if (xhr.status === 200) {
				callback(JSON.parse(xhr.responseText));
			} else {
				callback(['failure']);
			}
		}
	};

	// Opening the connection
	xhr.open('POST', url, true);
	xhr.setRequestHeader('Content-type','application/x-www-form-urlencoded');

	//All preparations are clear, send the request!
	xhr.send(params);
}

// This function outputs the results in the DOM
function notifyContactForm(responses){
	var resultBox = document.querySelector('.result-box');
	var fields = contactForm.querySelectorAll('input, textarea');
	fields = [].slice.call(fields, 1);

	resultBox.innerHTML = '';

	responses.forEach(function(response){
		var newMessage = document.createElement('p');
		newMessage.innerHTML = resultMessages[response];
		addClass(newMessage, 'result-message');

		if(response === 'missingFields' || response === 'invalidEmail' || response === 'invalidPhone' || response === 'invalidCharacters')
			addClass(newMessage, 'error');
		else
			addClass(newMessage, response);

		resultBox.appendChild(newMessage);


		if (response === 'missingFields') {
			forEachNl(fields, function(field){
				if (field.value === '') {
					addClass(field, 'invalid');
				} else {
					removeClass(field, 'invalid');
				}
			});
		} else if (response === 'invalidEmail' && response === 'invalidCharacters') {
			addClass(contactForm.querySelector('#email'), 'invalid');
		} else if (response === 'invalidPhone') {
			addClass(contactForm.querySelector('#phone'), 'invalid');
		} else {
			forEachNl(fields, function(field){
				removeClass(field, 'invalid');
				if(response === 'success') {
					field.value = '';
					field.focus();
					field.blur();
				}
			});
		}
	});
}
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInV0aWxpdGllcy5qcyIsImFqYXguanMiLCJtYWlsLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ2pFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ25EQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoic2NyaXB0Lm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIEFkZCBjbGFzcyByYXcgamF2YXNjcmlwdCAqL1xuXG5mdW5jdGlvbiBoYXNDbGFzcyhlbGUsY2xzKSB7XG4gICAgcmV0dXJuICEhZWxlLmNsYXNzTmFtZS5tYXRjaChuZXcgUmVnRXhwKCcoXFxcXHN8XiknK2NscysnKFxcXFxzfCQpJykpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVDbGFzcyhlbGVtZW50LCBjbGFzc05hbWUpIHtcbiAgICBpZiAoZWxlbWVudCAmJiBoYXNDbGFzcyhlbGVtZW50LGNsYXNzTmFtZSkpIHtcbiAgICAgICAgdmFyIHJlZyA9IG5ldyBSZWdFeHAoJyhcXFxcc3xeKScrY2xhc3NOYW1lKycoXFxcXHN8JCknKTtcbiAgICAgICAgZWxlbWVudC5jbGFzc05hbWUgPSAnICcgKyBlbGVtZW50LmNsYXNzTmFtZS5yZXBsYWNlKHJlZywnJykgKyAnICc7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBhZGRDbGFzcyhlbGVtZW50LCBjbGFzc05hbWUpIHtcbiAgICBpZiAoZWxlbWVudCAmJiAhaGFzQ2xhc3MoZWxlbWVudCxjbGFzc05hbWUpKSB7XG4gICAgICAgIGVsZW1lbnQuY2xhc3NOYW1lICs9ICcgICcrIGNsYXNzTmFtZSArICcgICc7XG4gICAgfVxufVxuXG4vLyBIaWdoZXItb3JkZXIgZnVuY3Rpb25zIGZvciBOb2RlbGlzdHMgYW5kIGZ1bGwgYnJvd3NlciBzdXBwb3J0XG4vLyBodHRwczovL3RvZGRtb3R0by5jb20vZGl0Y2gtdGhlLWFycmF5LWZvcmVhY2gtY2FsbC1ub2RlbGlzdC1oYWNrLyNyZWNvbW1lbmRhdGlvbnNcbi8vIFRoZXNlIGZ1bmN0aW9ucyBhcmUgdGFrZW4gZnJvbSB0aGUgYWxsbWlnaHR5IGh0dHA6Ly9lbG9xdWVudGphdmFzY3JpcHQubmV0LzA1X2hpZ2hlcl9vcmRlci5odG1sXG4vLyBBbHNvIHRoZXkgaGF2ZSBiZWVuIGFkYXB0ZWQgdG8gc3VwcG9ydCB0aGUgaW5kZXggdmFsdWVcbmZ1bmN0aW9uIGZvckVhY2hObChhcnJheSwgYWN0aW9uKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpKyspXG4gICAgYWN0aW9uKGFycmF5W2ldLCBpKTtcbn1cblxuZnVuY3Rpb24gZmlsdGVyTmwoYXJyYXksIHRlc3QpIHtcbiAgdmFyIHBhc3NlZCA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHRlc3QoYXJyYXlbaV0sIGkpKVxuICAgICAgcGFzc2VkLnB1c2goYXJyYXlbaV0pO1xuICB9XG4gIHJldHVybiBwYXNzZWQ7XG59XG5cbmZ1bmN0aW9uIG1hcE5sKGFycmF5LCB0cmFuc2Zvcm0pIHtcbiAgdmFyIG1hcHBlZCA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsgaSsrKVxuICAgIG1hcHBlZC5wdXNoKHRyYW5zZm9ybShhcnJheVtpXSwgaSkpO1xuICByZXR1cm4gbWFwcGVkO1xufVxuXG5mdW5jdGlvbiByZWR1Y2VObChhcnJheSwgY29tYmluZSwgc3RhcnQpIHtcbiAgdmFyIGN1cnJlbnQgPSBzdGFydDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkrKylcbiAgICBjdXJyZW50ID0gY29tYmluZShjdXJyZW50LCBhcnJheVtpXSwgaSk7XG4gIHJldHVybiBjdXJyZW50O1xufVxuXG5mdW5jdGlvbiBldmVyeU5sKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkrKykge1xuICAgIGlmICghcHJlZGljYXRlKGFycmF5W2ldLCBpKSlcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gc29tZU5sKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChwcmVkaWNhdGUoYXJyYXlbaV0sIGkpKVxuICAgICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufSIsIlxuXG5mdW5jdGlvbiBhamF4aWZ5KGxpbmtFbCwgY2FsbGJhY2spIHtcblx0ZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChsaW5rRWwpLmZvckVhY2goZnVuY3Rpb24oZWwpIHtcblx0XHR2YXIgdXJsID0gZWwuYXR0cmlidXRlcy5ocmVmLnZhbHVlO1xuXHRcdGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oZXZlbnQpIHtcblx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cblx0XHRcdHZhciB4bWxodHRwID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cblx0XHRcdHhtbGh0dHAub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICh4bWxodHRwLnJlYWR5U3RhdGUgPT0gWE1MSHR0cFJlcXVlc3QuRE9ORSApIHtcblx0XHRcdFx0XHRpZiAoeG1saHR0cC5zdGF0dXMgPT0gMjAwKSB7XG5cdFx0XHRcdFx0XHRjYWxsYmFjayh4bWxodHRwLnJlc3BvbnNlVGV4dCk7XG5cdFx0XHRcdFx0fSBlbHNlIGlmICh4bWxodHRwLnN0YXR1cyA9PSA0MDApIHtcblx0XHRcdFx0XHRcdGNvbnNvbGUubG9nKCdUaGVyZSB3YXMgYW4gZXJyb3IgNDAwJyk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGNvbnNvbGUubG9nKCdzb21ldGhpbmcgZWxzZSBvdGhlciB0aGFuIDIwMCB3YXMgcmV0dXJuZWQnKTtcblx0XHRcdFx0XHRcdGNvbnNvbGUubG9nKHhtbGh0dHAucmVzcG9uc2VUZXh0KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHRcdHhtbGh0dHAub3BlbihcIkdFVFwiLCB1cmwsIHRydWUpO1xuXHRcdFx0eG1saHR0cC5zZW5kKCk7XG5cdFx0fSwgZmFsc2UpO1xuXHR9KTtcbn1cblxuZnVuY3Rpb24gaW5qZWN0UGFydGlhbChwYXJ0aWFsRWwsIGNvbnRhaW5lckVsLCByZXNwb25zZSkge1xuXHR2YXIgY29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihjb250YWluZXJFbCk7XG5cdGNvbnRhaW5lci5pbm5lckhUTUwgPSBcIlwiO1xuXHRjdXJyZW50UG9wdXAgPSBuZXcgRE9NUGFyc2VyKCkucGFyc2VGcm9tU3RyaW5nKHJlc3BvbnNlLCAndGV4dC9odG1sJyk7XG5cdHZhciBjb250ZW50ID0gY3VycmVudFBvcHVwLmRvY3VtZW50RWxlbWVudC5xdWVyeVNlbGVjdG9yKHBhcnRpYWxFbCk7XG5cdGNvbnRhaW5lci5hcHBlbmRDaGlsZChjb250ZW50KTtcbn1cblxuYWpheGlmeSgnLmV2ZW50IGEnLCBmdW5jdGlvbihyZXNwb25zZSl7XG5cdGluamVjdFBhcnRpYWwoJ2FydGljbGUuZXZlbnQnLCAnLnBvcHVwLWNvbnRlbnQnLCByZXNwb25zZSk7XG5cdGFkZENsYXNzKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2JvZHknKSwgJ3BvcHVwLWFjdGl2ZScpO1xufSk7XG5cbmFqYXhpZnkoJ2EucG9zdCcsIGZ1bmN0aW9uKHJlc3BvbnNlKXtcblx0aW5qZWN0UGFydGlhbCgnYXJ0aWNsZS5wb3N0JywgJy5wb3B1cC1jb250ZW50JywgcmVzcG9uc2UpO1xuXHRhZGRDbGFzcyhkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdib2R5JyksICdwb3B1cC1hY3RpdmUnKTtcbn0pO1xuXG5mb3JFYWNoTmwoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmNsb3NlLXBvcHVwLCAucG9wdXAtb3ZlcmxheScpLCBmdW5jdGlvbihlbCkge1xuXHRlbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKGV2ZW50KSB7XG5cdFx0cmVtb3ZlQ2xhc3MoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignYm9keScpLCAncG9wdXAtYWN0aXZlJyk7XG5cdH0sIGZhbHNlKTtcbn0pOyIsInZhciBjb250YWN0Rm9ybSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ3NlY3Rpb24uY29udGFjdCBmb3JtJyk7XG5cbnZhciByZXN1bHRNZXNzYWdlcyA9IHtcblx0c3VjY2VzczogJ1ZvdHJlIG1lc3NhZ2UgYSDDqXTDqSBlbnZvecOpLCBtZXJjaS4nLFxuXHRpbnZhbGlkRW1haWw6ICdFcnJldXImbmJzcDs6IFZldWlsbGV6IGVudHJlciB1bmUgYWRyZXNzZSBlbWFpbCB2YWxpZGUuJyxcblx0aW52YWxpZFBob25lOiAnRXJyZXVyJm5ic3A7OiBWZXVpbGxleiBlbnRyZXIgdW4gbnVtw6lybyBkZSB0w6lsw6lwaG9uZSB2YWxpZGUuJyxcblx0bWlzc2luZ0ZpZWxkczogJ0VycmV1ciZuYnNwOzogRGVzIGNoYW1wcyByZXF1aXMgblxcJ29udCBwYXMgw6l0w6kgcmVtcGxpcy4nLFxuXHRpbnZhbGlkQ2hhcmFjdGVyczogJ0VycmV1ciZuYnNwOzogTOKAmWVtYWlsIGNvbnRpZW50IGRlcyBjYXJhY3TDqHJlcyBpbnZhbGlkZXMuJyxcblx0ZmFpbHVyZTogJ0VycmV1ciZuYnNwOzogVm90cmUgbWVzc2FnZSBu4oCZYSBwYXMgcHUgw6p0cmUgZW52b3nDqSwgdmV1aWxsZXogcsOpZXNzYXllciBwbHVzIHRhcmQuJ1xufTtcblxuZnVuY3Rpb24gc3VibWl0RW5xdWlyeShmb3JtKSB7XG5cdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdGFkZENsYXNzKGNvbnRhY3RGb3JtLCAnbG9hZGluZycpO1xuXHRhamF4UG9zdE1haWwoZm9ybSwgZnVuY3Rpb24ocmVzcG9uc2VzKXtcblx0XHRzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXHRcdFx0bm90aWZ5Q29udGFjdEZvcm0ocmVzcG9uc2VzKTsgLy8gcmVzcG9uc2UgaXMgYW4gYXJyYXkgb2YgbWVzc2FnZVxuXHRcdFx0cmVtb3ZlQ2xhc3MoY29udGFjdEZvcm0sICdsb2FkaW5nJyk7XG5cdFx0fSwgMTAwMCk7XG5cdH0pO1xufVxuXG4vLyBUaGlzIGZ1bmN0aW9uIHNlbmRzIHRoZSByZXF1ZXN0IHRvIHRoZSBzZXJ2ZXJcbmZ1bmN0aW9uIGFqYXhQb3N0TWFpbChmb3JtLCBjYWxsYmFjaykge1xuXHR2YXIgdXJsID0gZm9ybS5xdWVyeVNlbGVjdG9yKCcjYWN0aW9uJykudmFsdWUsXG5cdFx0eGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCksXG5cdFx0cGFyYW1zID0gW10sXG5cdFx0cmVzcG9uc2U7XG5cblx0Ly8gQnVpbGRpbmcgdXAgdGhlIHJlcXVlc3QuLi5cblx0Zm9yICh2YXIgaSA9IDAsIG5hbWUsIHZhbHVlOyBpIDwgZm9ybS5lbGVtZW50cy5sZW5ndGg7IGkrKykge1xuXHRcdG5hbWUgPSBlbmNvZGVVUklDb21wb25lbnQoZm9ybS5lbGVtZW50c1tpXS5uYW1lKTtcblx0XHR2YWx1ZSA9IGVuY29kZVVSSUNvbXBvbmVudChmb3JtLmVsZW1lbnRzW2ldLnZhbHVlKTtcblx0XHRwYXJhbXMucHVzaChuYW1lICsgJz0nICsgdmFsdWUpO1xuXHR9XG5cdHBhcmFtcy5wdXNoKGVuY29kZVVSSUNvbXBvbmVudCgnYWpheCcpICsgXCI9XCIgKyBlbmNvZGVVUklDb21wb25lbnQodHJ1ZSkpOyAvLyBUaGlzIGlzIHNlbnQgd2l0aCBhamF4XG5cdHBhcmFtcyA9IHBhcmFtcy5qb2luKCcmJyk7XG5cblx0Ly8gUmVjb3JkaW5nIHRoZSByZXNwb25zZVxuXHR4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XG5cdFx0aWYgKHhoci5yZWFkeVN0YXRlID09PSA0KSB7XG5cdFx0XHRpZiAoeGhyLnN0YXR1cyA9PT0gMjAwKSB7XG5cdFx0XHRcdGNhbGxiYWNrKEpTT04ucGFyc2UoeGhyLnJlc3BvbnNlVGV4dCkpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y2FsbGJhY2soWydmYWlsdXJlJ10pO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblxuXHQvLyBPcGVuaW5nIHRoZSBjb25uZWN0aW9uXG5cdHhoci5vcGVuKCdQT1NUJywgdXJsLCB0cnVlKTtcblx0eGhyLnNldFJlcXVlc3RIZWFkZXIoJ0NvbnRlbnQtdHlwZScsJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcpO1xuXG5cdC8vQWxsIHByZXBhcmF0aW9ucyBhcmUgY2xlYXIsIHNlbmQgdGhlIHJlcXVlc3QhXG5cdHhoci5zZW5kKHBhcmFtcyk7XG59XG5cbi8vIFRoaXMgZnVuY3Rpb24gb3V0cHV0cyB0aGUgcmVzdWx0cyBpbiB0aGUgRE9NXG5mdW5jdGlvbiBub3RpZnlDb250YWN0Rm9ybShyZXNwb25zZXMpe1xuXHR2YXIgcmVzdWx0Qm94ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnJlc3VsdC1ib3gnKTtcblx0dmFyIGZpZWxkcyA9IGNvbnRhY3RGb3JtLnF1ZXJ5U2VsZWN0b3JBbGwoJ2lucHV0LCB0ZXh0YXJlYScpO1xuXHRmaWVsZHMgPSBbXS5zbGljZS5jYWxsKGZpZWxkcywgMSk7XG5cblx0cmVzdWx0Qm94LmlubmVySFRNTCA9ICcnO1xuXG5cdHJlc3BvbnNlcy5mb3JFYWNoKGZ1bmN0aW9uKHJlc3BvbnNlKXtcblx0XHR2YXIgbmV3TWVzc2FnZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcblx0XHRuZXdNZXNzYWdlLmlubmVySFRNTCA9IHJlc3VsdE1lc3NhZ2VzW3Jlc3BvbnNlXTtcblx0XHRhZGRDbGFzcyhuZXdNZXNzYWdlLCAncmVzdWx0LW1lc3NhZ2UnKTtcblxuXHRcdGlmKHJlc3BvbnNlID09PSAnbWlzc2luZ0ZpZWxkcycgfHwgcmVzcG9uc2UgPT09ICdpbnZhbGlkRW1haWwnIHx8IHJlc3BvbnNlID09PSAnaW52YWxpZFBob25lJyB8fCByZXNwb25zZSA9PT0gJ2ludmFsaWRDaGFyYWN0ZXJzJylcblx0XHRcdGFkZENsYXNzKG5ld01lc3NhZ2UsICdlcnJvcicpO1xuXHRcdGVsc2Vcblx0XHRcdGFkZENsYXNzKG5ld01lc3NhZ2UsIHJlc3BvbnNlKTtcblxuXHRcdHJlc3VsdEJveC5hcHBlbmRDaGlsZChuZXdNZXNzYWdlKTtcblxuXG5cdFx0aWYgKHJlc3BvbnNlID09PSAnbWlzc2luZ0ZpZWxkcycpIHtcblx0XHRcdGZvckVhY2hObChmaWVsZHMsIGZ1bmN0aW9uKGZpZWxkKXtcblx0XHRcdFx0aWYgKGZpZWxkLnZhbHVlID09PSAnJykge1xuXHRcdFx0XHRcdGFkZENsYXNzKGZpZWxkLCAnaW52YWxpZCcpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHJlbW92ZUNsYXNzKGZpZWxkLCAnaW52YWxpZCcpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9IGVsc2UgaWYgKHJlc3BvbnNlID09PSAnaW52YWxpZEVtYWlsJyAmJiByZXNwb25zZSA9PT0gJ2ludmFsaWRDaGFyYWN0ZXJzJykge1xuXHRcdFx0YWRkQ2xhc3MoY29udGFjdEZvcm0ucXVlcnlTZWxlY3RvcignI2VtYWlsJyksICdpbnZhbGlkJyk7XG5cdFx0fSBlbHNlIGlmIChyZXNwb25zZSA9PT0gJ2ludmFsaWRQaG9uZScpIHtcblx0XHRcdGFkZENsYXNzKGNvbnRhY3RGb3JtLnF1ZXJ5U2VsZWN0b3IoJyNwaG9uZScpLCAnaW52YWxpZCcpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRmb3JFYWNoTmwoZmllbGRzLCBmdW5jdGlvbihmaWVsZCl7XG5cdFx0XHRcdHJlbW92ZUNsYXNzKGZpZWxkLCAnaW52YWxpZCcpO1xuXHRcdFx0XHRpZihyZXNwb25zZSA9PT0gJ3N1Y2Nlc3MnKSB7XG5cdFx0XHRcdFx0ZmllbGQudmFsdWUgPSAnJztcblx0XHRcdFx0XHRmaWVsZC5mb2N1cygpO1xuXHRcdFx0XHRcdGZpZWxkLmJsdXIoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fVxuXHR9KTtcbn0iXX0=
